<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bscheiman.Common</name>
    </assembly>
    <members>
        <member name="M:bscheiman.Common.Extensions.Extensions.GetRandomElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a random element from the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">Source list.</param>
            <returns>Random element</returns>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.AsEnum``1(System.String)">
            <summary>
            Attempts to parse the specified string as a member of enum
            </summary>
            <returns>The parsed enum.</returns>
            <param name="str">String to parse, case insensitive.</param>
            <typeparam name="T">Type of enum</typeparam>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.FromHexString(System.String)">
            <summary>
            Returns a byte array representing the specified string. ("0000" => 0x00, 0x00)
            </summary>
            <returns>The hex string.</returns>
            <param name="str">String to convert.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.RemoveDiacritics(System.String)">
            <summary>
            Removes the diacritics from a UTF8 string. Use with caution: in Spanish, a√±o is *VERY* different from ano.
            </summary>
            <returns>Diacritic-less string.</returns>
            <param name="input">String to modify.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToHMAC256(System.String,System.String)">
            <summary>
            Generates an HMAC SHA256 string from the specified string and key
            </summary>
            <returns>Hashed string, uppercase.</returns>
            <param name="str">Source string.</param>
            <param name="key">Key.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToMD5(System.String)">
            <summary>
            Generates an MD5 hash from the specified string
            </summary>
            <returns>MD5 hash, uppercase.</returns>
            <param name="str">String.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToSHA1(System.String)">
            <summary>
            Generates a SHA1 hash from the specified string
            </summary>
            <returns>SHA1 hash, uppercase.</returns>
            <param name="str">String.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Truncate(System.String,System.Int32)">
            <summary>
            Truncate the specified string according to maxLength.
            </summary>
            <param name="value">Value.</param>
            <param name="maxLength">Max length.</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.GetAttributeOfType``1(System.Enum)">
            <summary>
            Gets the first matching attribute of type T
            </summary>
            <returns>The attribute instance</returns>
            <param name="enumVal">Enum</param>
            <typeparam name="T">Enum to use</typeparam>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToEpoch(System.DateTime)">
            <summary>
            Returns the specified DateTime as epoch (seconds since Jan 1, 1970)
            </summary>
            <returns>Epoch</returns>
            <param name="dt">DateTime to use</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Days(System.Int32)">
            <summary>
            Returns number of days in seconds.
            </summary>
            <param name="i">Days</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.FromEpoch(System.Int32)">
            <summary>
            Creates a DateTime object from the specified number of seconds
            </summary>
            <returns>DateTime object</returns>
            <param name="l">Epoch</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Hours(System.Int32)">
            <summary>
            Returns number of hours in seconds. (ie, 60*i)
            </summary>
            <param name="i">Hours</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Minutes(System.Int32)">
            <summary>
            Returns number of minutes in seconds. (ie, 60*i)
            </summary>
            <param name="i">Minutes</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Seconds(System.Int32)">
            <summary>
            Returns number of seconds. IN SECONDS. Best extension ever.
            </summary>
            <param name="i">Seconds</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.Years(System.Int32)">
            <summary>
            Returns number of years in seconds. (ie, 60*i)
            </summary>
            <param name="i">Years</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.FromEpoch(System.Int64)">
            <summary>
            Creates a DateTime object from the specified number of seconds
            </summary>
            <returns>DateTime object</returns>
            <param name="l">Epoch</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToGb(System.Int64)">
            <summary>
            Returns the specified number of bytes as gigabytes
            </summary>
            <returns>Expressed gigabytes</returns>
            <param name="l">Number of bytes</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToKb(System.Int64)">
            <summary>
            Returns the specified number of bytes as kilobytes
            </summary>
            <returns>Expressed kilobytes</returns>
            <param name="l">Number of bytes</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToMb(System.Int64)">
            <summary>
            Returns the specified number of bytes as megabytes
            </summary>
            <returns>Expressed megabytes</returns>
            <param name="l">Number of bytes</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToTb(System.Int64)">
            <summary>
            Returns the specified number of bytes as terabytes
            </summary>
            <returns>Expressed terabytes</returns>
            <param name="l">Number of bytes</param>
        </member>
        <member name="M:bscheiman.Common.Extensions.Extensions.ToQueryString(System.Object,System.String,System.Boolean)">
            <summary>
            Generates a query-string-like representation of the object. Useful for REST queries.
            </summary>
            <returns>The query string.</returns>
            <param name="request">Object to reflect.</param>
            <param name="separator">Separator for array-based fields.</param>
            <param name="readAndWrite">Whether to use read/write properties or only read.</param>
        </member>
        <member name="M:bscheiman.Common.Helpers.Ignore.Exception``1(System.Func{``0},``0)">
            <summary>
            Runs action() and returns a default value if there's an exception.
            </summary>
            <param name="act">Action</param>
            <param name="def">Default value</param>
            <typeparam name="T">Type parameter</typeparam>
        </member>
        <member name="M:bscheiman.Common.Helpers.Ignore.Exception(System.Action)">
            <summary>
            Ignores any exception. All those try/catch
            </summary>
            <param name="act">Action to execute</param>
        </member>
    </members>
</doc>
